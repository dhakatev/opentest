package org.getopentest.actions;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpression;
import javax.xml.xpath.XPathFactory;
import org.getopentest.base.TestAction;
import org.w3c.dom.Document;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 * An action that parses XML data and extracts fragments of it based on XPath
 * expressions.
 */
public class ReadXml extends TestAction {

    @Override
    public void run() {
        super.run();

        String filePath = this.readStringArgument("file", null);
        String xmlString = this.readStringArgument("xml", null);
        String xPathString = this.readStringArgument("xpath", this.readStringArgument("xPath", "/*"));
        Boolean outputAsObject = this.readBooleanArgument("outputAsObject", false);

        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document doc = null;

            if (filePath != null) {
                File xmlFile = new File(filePath);
                doc = builder.parse(xmlFile);
            } else if (xmlString != null) {
                doc = builder.parse(new ByteArrayInputStream(xmlString.getBytes("UTF-8")));
            } else {
                throw new RuntimeException("Neither the \"file\" argument, nor the \"xml\" argument were provided.");
            }

            XPathFactory xPathfactory = XPathFactory.newInstance();
            XPath xpath = xPathfactory.newXPath();
            XPathExpression expr = xpath.compile(xPathString);

            if (outputAsObject) {
                Node xmlNode = (Node) expr.evaluate(doc, XPathConstants.NODE);
                if (xmlNode != null) {
                    this.writeOutput("object", processNode(xmlNode));
                } else {
                    throw new RuntimeException("The XPath expression did not match any nodes");
                }
            } else {
                String stringValue = expr.evaluate(doc);
                this.writeOutput("text", stringValue);
                
                // The output "value" is deprecated in favor of "text",
                // and will eventually be removed
                this.writeOutput("value", stringValue);
            }
        } catch (Exception ex) {
            throw new RuntimeException("Failed to parse XML", ex);
        }
    }

    private void processAttributes(Node xmlNode, Map<String, Object> nodeObject) {
        NamedNodeMap attributesMap = xmlNode.getAttributes();
        int attrCount = attributesMap.getLength();
        for (int attrIndex = 0; attrIndex < attrCount; attrIndex++) {
            Node attributeNode = attributesMap.item(attrIndex);
            if (attributeNode.getNodeType() == Node.ATTRIBUTE_NODE) {
                String prefix = attributeNode.getPrefix() != null ? attributeNode.getPrefix() : "";
                nodeObject.put("$" + prefix + attributeNode.getNodeName(), attributeNode.getNodeValue());
            }
        }
    }

    private Object processNode(Node xmlNode) {
        if (xmlNode.getNodeType() == Node.ELEMENT_NODE) {
            Map<String, Object> nodeObject = new HashMap<>();

            processAttributes(xmlNode, nodeObject);

            StringBuilder nodeText = null;
            NodeList nodeList = xmlNode.getChildNodes();
            int childCount = nodeList.getLength();
            for (int childIndex = 0; childIndex < childCount; childIndex++) {
                Node childNode = nodeList.item(childIndex);
                if (childNode.getNodeType() == Node.ELEMENT_NODE) {
                    String prefix = childNode.getPrefix() != null ? childNode.getPrefix() : "";
                    nodeObject.put(prefix + childNode.getNodeName(), processNode(childNode));
                } else if (childNode.getNodeType() == Node.TEXT_NODE) {
                    if (nodeText == null) {
                        nodeText = new StringBuilder();
                    }
                    
                    nodeText.append(childNode.getTextContent());
                }
            }

            if (nodeText != null) {
                nodeObject.put("$$text", nodeText.toString());
            }

            return nodeObject;
        } else if (xmlNode.getNodeType() == Node.ATTRIBUTE_NODE) {
            return xmlNode.getNodeValue();
        } else if (xmlNode.getNodeType() == Node.TEXT_NODE) {
            return xmlNode.getNodeValue();
        } else {
            return null;
        }
    }
}
