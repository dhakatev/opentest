package org.getopentest.selenium;

import org.getopentest.selenium.core.SeleniumTestAction;
import java.util.List;
import java.util.stream.Collectors;
import org.getopentest.util.Factory;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

public class AssertListOption extends SeleniumTestAction {

    @Override
    public void run() {

        super.run();

        By locator = this.readLocatorArgument("locator");
        String optionValue = this.readStringArgument("optionValue", null);
        String optionText = this.readStringArgument("optionText", null);
        Integer optionNumber = this.readIntArgument("optionNumber", null);

        this.waitForAsyncCallsToFinish();

        Select dropdownElement = new Select(this.getElement(locator));
        List<WebElement> selectedOptions = dropdownElement.getAllSelectedOptions();
        boolean selectionIsValid = false;

        if (optionValue != null) {
            if (selectedOptions.size() == 1) {
                WebElement selectedOption = selectedOptions.get(0);
                if (selectedOption.getAttribute("value").equals(optionValue)) {
                    selectionIsValid = true;
                }
            }
        } else if (optionText != null) {
            if (selectedOptions.size() == 1) {
                WebElement selectedOption = selectedOptions.get(0);
                if (selectedOption.getText().equals(optionText)) {
                    selectionIsValid = true;
                }
            }
        } else if (optionNumber != null) {
            List<WebElement> allOptions = dropdownElement.getOptions();
            if (selectedOptions.size() == 1 && allOptions.size() >= optionNumber) {
                WebElement nthOption = allOptions.get(optionNumber - 1);
                WebElement selectedOption = selectedOptions.get(0);
                if (selectedOption.getAttribute("value").equals(nthOption.getAttribute("value"))
                        && selectedOption.getText().equals(nthOption.getText())) {
                    selectionIsValid = true;
                }
            }
        } else {
            throw new RuntimeException(
                    "You must identify the option you want to select from the list by providing at least "
                    + "one of the following arguments: optionValue, optionText or optionNumber.");
        }

        Object selectedOptionsSet = selectedOptions.stream()
                .map(o -> new ListOption(o.getText(), o.getAttribute("value")))
                .collect(Collectors.toSet());
        String selectedOptionsString = Factory.getGson().toJson(selectedOptionsSet);

        if (!selectionIsValid) {
            throw new RuntimeException(String.format(
                    "Assertion failed: selected option(s) failed validation for list %s. The selected options were: %s",
                    locator,
                    selectedOptionsString));
        }
    }

    static class ListOption {

        public String text;
        public String value;
        
        public ListOption(String text, String value) {
            this.text = text;
            this.value = value;
        }
    }
}
